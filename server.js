const express = require('express');
const http = require('http');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
const path = require('path');
const app = express();
const server = http.createServer(app);

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));
console.log('üìÇ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–º–Ω–∞—Ç –∏ –ª–æ–≥–∏–∫—É
let roomManager, gameLogic;
try {
  roomManager = require('./config/rooms');
  gameLogic = require('./config/game-logic');
  console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç –∏ –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  process.exit(1);
}

const { startGame, handleBasicAnswer, handleSprintAnswer } = gameLogic;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket.IO...');
const io = require('socket.io')(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['websocket', 'polling'],
  allowEIO3: true,
  pingTimeout: 60000,
  pingInterval: 25000,
  maxHttpBufferSize: 1e8,
  connectionStateRecovery: {
    maxDisconnectionDuration: 2 * 60 * 1000,
    skipMiddlewares: true
  }
});

// –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
io.engine.on('connection_error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–≤–∏–∂–∫–∞:', err);
});

io.engine.on('headers', (headers, req) => {
  console.log('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', headers);
});

io.on('connection', (socket) => {
  console.log(`\nüîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
  socket.onAny((event, ...args) => {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${event}`, args.length > 0 ? JSON.stringify(args) : '');
  });
  
  socket.onAnyOutgoing((event, ...args) => {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${event}`, args.length > 0 ? JSON.stringify(args) : '');
  });
  
  // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
  socket.on('request-room-list', () => {
    console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
    try {
      const roomList = Object.values(roomManager.rooms).map(room => ({
        id: room.id,
        name: room.name || `–ö–æ–º–Ω–∞—Ç–∞ ${room.id.slice(0, 4)}`,
        playersCount: room.players.length,
        requiredPlayers: room.mode === "duel" ? 2 : 
                       (room.mode === "alliance-1v2" ? 3 : 4),
        status: room.gameState,
        mode: room.mode,
        categories: room.categories || []
      }));
      
      console.log('üìã –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', roomList);
      socket.emit('room-list-update', roomList);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ request-room-list:', error);
      socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
    }
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  socket.on('create-room', (data) => {
    console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
    try {
      const { playerName, roomName, mode, categories } = data;
      const mapSize = data.mapSize || 5;
      
      if (!playerName) {
        console.error('‚ùå –ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
        socket.emit('error', '–ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
        return;
      }
      
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–µ–º—ã
      const finalCategories = (categories && categories.length > 0) ? 
        categories : null;
      
      console.log(`üÜï –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${playerName}, ${mode}, —Ç–µ–º—ã: ${finalCategories}, –Ω–∞–∑–≤–∞–Ω–∏–µ: ${roomName || '–∞–≤—Ç–æ'}`);
      roomManager.createRoom(io, socket, { 
        playerName, 
        roomName,
        mode, 
        categories: finalCategories,
        mapSize 
      }, uuidv4);
      
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ createRoom –≤—ã–∑–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:', error);
      socket.emit('error', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã');
    }
  });
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('join-room', (data) => {
    console.log('üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
    try {
      const { roomId, playerName } = data;
      
      if (!roomId) {
        console.error('‚ùå ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
        socket.emit('error', 'ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
      }
      
      if (!playerName) {
        console.error('‚ùå –ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
        socket.emit('error', '–ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
        return;
      }
      
      roomManager.joinRoom(io, socket, { roomId, playerName });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ');
    }
  });
  
  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  socket.on('start-game', (data) => {
    console.log('üéÆ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
    try {
      const { roomId } = data;
      
      if (!roomId) {
        console.error('‚ùå ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
        socket.emit('error', 'ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
      }
      
      const room = roomManager.rooms[roomId];
      if (room && room.players.some(p => p.id === socket.id)) {
        console.log(`üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        startGame(io, roomId);
      } else {
        console.error('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–Ω–∞—Ç—ã');
        socket.emit('error', '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', error);
      socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã');
    }
  });
  
  // –û—Ç–≤–µ—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
  socket.on('answer', (data) => {
    console.log('üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:', data);
    try {
      const { roomId, questionId, answerIndex } = data;
      
      if (!roomId || !questionId || answerIndex === undefined) {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
        return;
      }
      
      handleBasicAnswer(io, socket, { roomId, questionId, answerIndex });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
    }
  });
  
  // –°–ø—Ä–∏–Ω—Ç-–æ—Ç–≤–µ—Ç
  socket.on('sprint-answer', (data) => {
    console.log('‚ö° –ü–æ–ª—É—á–µ–Ω —Å–ø—Ä–∏–Ω—Ç-–æ—Ç–≤–µ—Ç:', data);
    try {
      const { roomId, questionId, answerIndex } = data;
      
      if (!roomId || !questionId || answerIndex === undefined) {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç-–æ—Ç–≤–µ—Ç–∞');
        return;
      }
      
      handleSprintAnswer(io, socket, { roomId, questionId, answerIndex });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø—Ä–∏–Ω—Ç-–æ—Ç–≤–µ—Ç–∞:', error);
    }
  });
  
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', (reason) => {
    console.log(`\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ ${socket.id}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
    
    for (const roomId in roomManager.rooms) {
      try {
        const room = roomManager.rooms[roomId];
        const playerIndex = room.players.findIndex(p => p.id === socket.id);
        
        if (playerIndex !== -1) {
          console.log(`üë• –ò–≥—Ä–æ–∫ ${socket.id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
          room.players.splice(playerIndex, 1);
          
          // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –æ–ø—É—Å—Ç–µ–ª–∞
          if (room.players.length === 0) {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
            delete roomManager.rooms[roomId];
            io.emit('room-list-update', Object.values(roomManager.rooms).map(room => ({
              id: room.id,
              name: room.name || `–ö–æ–º–Ω–∞—Ç–∞ ${room.id.slice(0, 4)}`,
              playersCount: room.players.length,
              requiredPlayers: room.mode === "duel" ? 2 : 
                             (room.mode === "alliance-1v2" ? 3 : 4),
              status: room.gameState,
              mode: room.mode,
              categories: room.categories || []
            })));
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId} –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞`);
            io.to(roomId).emit('player-left', { playerId: socket.id });
            io.to(roomId).emit('score-update', {
              scores: room.players.map(p => ({ id: p.id, name: p.name, score: p.score }))
            });
            
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            if (room.gameState === 'in-progress' && room.players.length === 1) {
              console.log(`üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} (–æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫)`);
              room.gameState = 'waiting';
              io.to(roomId).emit('game-ended', { reason: '–û–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–ª—Å—è' });
            }
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, error);
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
  socket.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞:', error);
  });
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  socket.emit('connection-confirmed', {
    status: 'connected',
    socketId: socket.id,
    timestamp: Date.now()
  });
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  if (error.code === 'EADDRINUSE') {
    console.error('\n‚ùå –ü–æ—Ä—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º!');
    console.log('   –†–µ—à–µ–Ω–∏–µ:');
    console.log('   1. –ù–∞–π–¥–∏—Ç–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π –ø–æ—Ä—Ç:');
    console.log('      - –î–ª—è Linux/Mac: sudo lsof -i :3000 –∏–ª–∏ sudo kill $(sudo lsof -t -i:3000)');
    console.log('      - –î–ª—è Windows: netstat -ano | findstr :3000 –∑–∞—Ç–µ–º taskkill /PID <PID> /F');
    console.log('   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç:');
    console.log('      - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: PORT=3001 node server.js');
    process.exit(1);
  } else {
    console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
const PORT = process.env.PORT || 3000;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, '0.0.0.0', () => {
  console.log(`\nüéâ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω: http://0.0.0.0:${PORT}`);
  console.log(`üí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ –ö–õ–ò–ï–ù–¢–°–ö–û–ú –∫–æ–º–ø—å—é—Ç–µ—Ä–µ: http://–í–ê–®_IP_–°–ï–†–í–ï–†–ê:${PORT}`);
  console.log(`üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO –æ—Ç–∫—Ä–æ–π—Ç–µ: http://–í–ê–®_IP_–°–ï–†–í–ï–†–ê:${PORT}/socket.io/socket.io.js`);
  console.log('\nüìå –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ "–í–ê–®_IP_–°–ï–†–í–ï–†–ê" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!');
  console.log('   –ù–∞–ø—Ä–∏–º–µ—Ä: http://192.168.1.100:3000');
});